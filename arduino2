#include <SoftwareSerial.h>
#include <Wire.h> // For master/slave

// CONSTANTS
int SPEAKER_1 = 9;
int SPEAKER_2 = 8;
const int MA1=2;
const int MA2=4;
const int PWMA=3;

int LCD_PORT = 6;

// GLOBAL VARIABLES

int alarmH = 12;
int alarmM = 1;
String alarmTimeOfDay = "am";
boolean alarmOn = false;
int h = 0;
int m = 0;
int s = 51;
int ms = 0;
int testVar = 0;
int increment = 0;
String timeOfDay = "am";

// Attach the serial enabld LCD's RX line to digital pin 6
SoftwareSerial LCD(LCD_PORT, 5); // Arduino SS_RX = pin 6 (unused), Arduino SS_TX = pin 5 

// function that executes whenever data is received from master
// this function is registered as an event, see setup()

void checkTime() {
  if(s == 60) {
    m++;
    s = 0;
  }

  if(m == 60) {
    h++;
    checkTimeOfDay();
    m = 0;
  }

  if(h == 13) {
    h = 1;
  }
}

void checkAlarmTime() {
  if(alarmM == 60) {
    alarmH++;
    checkAlarmTimeOfDay();
    alarmM = 0;
  }

  if(alarmH == 13) {
    alarmH = 1;
  }
}

void receiveEvent(int howMany) {
  while(0 < Wire.available()) {
      testVar = Wire.read();
      if(testVar == 2) {
        h++;
        checkTimeOfDay();
      } else if (testVar == 4) {
        m++;
      } else if (testVar == 7) {
        alarmH++;
        checkAlarmTimeOfDay();
      } else if (testVar == 9) {
        alarmM++;
      }
  }

  checkTime();
  checkAlarmTime();
}

void timeTeller() {
    Serial.print("Hours: ");
    Serial.print(h);
    Serial.print(" Minutes: ");
    Serial.print(m);
    Serial.print(" Seconds: ");
    Serial.println(s);
    displayTime("");

    // NOTE: Maybe change to ms to get better functionality, remember what Merek was saying about checking for button pushes 
    delay(950); // Adjustment so time increments in correct portions
    s++;
    //ms += 10;

    if(ms == 170) {
      s++;
      ms = 0;
    }
  
    // checks to update the time
    if(s == 60) {
      s = 0;
      m++;
      if(m==60) {
        h++;
        checkTimeOfDay();
        m = 0;
      }
      
    }
  
/*
    Wire.beginTransmission(2); // transmit to device #2
    Wire.write(h);
    Wire.write(m);
    Wire.write(s);  
    Wire.endTransmission(true);    // stop 
*/    
  
}

// LCD FUNCTIONS

/* 16 spaces */
void clearLCD() {
  LCD.write("                ");
  LCD.write("                ");
}

void toFirstLine() {
  LCD.write(254); 
  LCD.write(128);
}

void toSecondLine() {
  LCD.write(254);
  LCD.write(192);
}

void resetLCD() {
  clearLCD();
  toFirstLine();
}
/*
void playAlarm(int level) {
  resetLCD();
  LCD.write("WAKE UP!");
  
  if(level == 1) {
    digitalWrite(GREEN_PORT, HIGH); // Green
  } 
  else if (level == 2) {
    digitalWrite(YELLOW_PORT, HIGH); // Yellow
  }
  else if (level == 3) {
    digitalWrite(RED_PORT, HIGH); // Red
  }
}*/

void setTime(int hours, int mins) {
  h = hours;
  m = mins;
}

void timeSetterMode() {
  s = 0;
  
  boolean switchMethod = false;
  Serial.println("WOOHOO!");

  increment = 0;

  // Changing the hour
  while(!switchMethod) {
    
    receiveEvent(1);
/*
    char incStr[10];

    sprintf(incStr,"%4d",increment); // create strings from the numbers
    resetLCD();
    LCD.write(incStr);*/
    displayTime("timeSetterMode");

    if(testVar == 3) {
      resetLCD();
      switchMethod = true;
    }
  }

  switchMethod = false;

  while(!switchMethod) {
    receiveEvent(1);

    displayTime("timeSetterMode");

    if(testVar == 5){
      resetLCD();
      switchMethod = true;
    }
  }

}

void alarmSetterMode() {;
  int startTime = millis();
  Serial.println(startTime);
  
  boolean switchMethod = false;
  Serial.println("WOOHOO!");

  increment = 0;

  // Changing the hour
  while(!switchMethod) {
    
    receiveEvent(1);
/*
    char incStr[10];

    sprintf(incStr,"%4d",increment); // create strings from the numbers
    resetLCD();
    LCD.write(incStr);*/
    displayAlarm("alarmSetterMode");

    if(testVar == 8) {
      resetLCD();
      switchMethod = true;
    }
  }

  switchMethod = false;

  while(!switchMethod) {
    receiveEvent(1);

    displayAlarm("alarmSetterMode");

    if(testVar == 10){
      resetLCD();
      switchMethod = true;
    }
  }

  int endTime = millis();
  Serial.println(endTime);  

  s = s + (endTime - startTime) / 1000;
  if(s >= 60) {
    s -= 60;
    m++; 
  }
}

void displayTime(String method) {
  char hourString[10], minString[10], secString[10], todString[10];

  sprintf(hourString,"%2d",h); // create strings from the numbers
  sprintf(minString,"%2d",m);
  sprintf(secString,"%2d",s);
  sprintf(todString,"%2d",timeOfDay);

  resetLCD();
  LCD.write(hourString);
  LCD.write(":");
  LCD.write(minString);
  if(timeOfDay == "am") {
    LCD.write(" am");
  } else {
    LCD.write(" pm");
  }

  if(method == "timeSetterMode") {
    toSecondLine();
    if(testVar == 1 || testVar == 2) {
      LCD.write("Editing Hours...");
    } else if (testVar == 3 || testVar == 4) {
      LCD.write("Editing Minutes...");
    }
  }

  if(alarmOn) {
    toSecondLine();
    LCD.write("           ");
    if(alarmOn) {
      LCD.write("*");
    } else {
      LCD.write(" ");
    }
  
    displayAlarm("displayTime");
  }
}

void displayAlarm(String method) {
  char hourString[10], minString[10], secString[10];

  sprintf(hourString,"%2d",alarmH); // create strings from the numbers
  sprintf(minString,"%2d",alarmM);

  if(method != "displayTime") {
    resetLCD();
  }
  LCD.write(hourString);
  LCD.write(":");
  LCD.write(minString);
  if(alarmTimeOfDay == "am") {
    LCD.write(" am");
  } else {
    LCD.write(" pm");
  }
  LCD.write("    ");

  if(method == "alarmSetterMode") {
    toSecondLine();
    if(testVar == 6 || testVar == 7) {
      LCD.write("Editing Hours...");
    } else if (testVar == 8 || testVar == 9) {
      LCD.write("Editing Minutes...");
    }
  }
}

void checkTimeOfDay() {
  if(h == 12) {
    if (timeOfDay == "am") {
      timeOfDay = "pm";
    } else {
      timeOfDay = "am";
    }
  }
}

void checkAlarmTimeOfDay() {
  if(alarmH == 12) {
    if (alarmTimeOfDay == "am") {
      alarmTimeOfDay = "pm";
    } else {
      alarmTimeOfDay = "am";
    }
  }
}

void alarm() {
  if(alarmOn && alarmH == h && alarmM == m){
    resetLCD();
    LCD.write("ALARM");
    if(s % 2 == 0) {
      tone(SPEAKER_1, 2000, 1000);
      tone(SPEAKER_2, 2000, 1000);
    } 

    moveWheels();
  }
}

void moveWheels() {
  digitalWrite(MA1,HIGH);
  digitalWrite(MA2,LOW);
  analogWrite(PWMA,255);
}

void setup() {
  Wire.begin(2);                // join i2c bus with address #8
  Wire.onReceive(receiveEvent); // register event
  Serial.begin(9600);           // start serial for output

  pinMode(MA1,OUTPUT);
  pinMode(MA2,OUTPUT);
  pinMode(PWMA,OUTPUT);

  LCD.begin(9600); // set up serial port for 9600 baud
  delay(500); // wait for display to boot 

  setTime(12, 0);
}

void loop() {
  receiveEvent(1);
  Serial.println(testVar);
  if(testVar == 1) {
    timeSetterMode();
  } else if (testVar == 6) {
    alarmSetterMode();
  }
  timeTeller();
  alarm();
}
