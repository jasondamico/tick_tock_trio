#include <SoftwareSerial.h>
#include <Wire.h> // For master/slave

// CONSTANTS
const int SPEAKER_1 = 9;
const int SPEAKER_2 = 8;

const int MA1=2;
const int MA2=4;
const int PWMA=3;

const int LCD_PORT = 6;

// SIGNAL CONSTANTS

const int TIME_SETTER = 1;
const int HOUR_UP = 2;
const int HOUR_TO_MIN = 3;
const int MINUTE_UP = 4;
const int EXIT_TIME_SETTER = 5;

const int ALARM_SETTER = 6;
const int ALARM_HOUR_UP = 7;
const int ALARM_HOUR_TO_MIN = 8;
const int ALARM_MINUTE_UP = 9;
const int EXIT_ALARM_SETTER = 10;

const int ALARM_ON = 11;
const int ALARM_OFF = 12;

const int MOTORS_OFF = 13;

// GLOBAL VARIABLES

int alarmH = 12;
int alarmM = 1;
String alarmTimeOfDay = "am";
boolean alarmOn = true;
boolean alarmPlaying = false;

int h = 0;
int m = 0;
int s = 51;
int ms = 0;
int methodSignal = 0;
String timeOfDay = "am";

// Attach the serial enabld LCD's RX line to digital pin 6
SoftwareSerial LCD(LCD_PORT, 5); // Arduino SS_RX = pin 6 (unused), Arduino SS_TX = pin 5 

// function that executes whenever data is received from master
// this function is registered as an event, see setup()

void checkTime() {
  if(s == 60) {
    m++;
    s = 0;
  }

  if(m == 60) {
    h++;
    checkTimeOfDay();
    m = 0;
  }

  if(h == 13) {
    h = 1;
  }
}

void checkAlarmTime() {
  if(alarmM == 60) {
    alarmH++;
    checkAlarmTimeOfDay();
    alarmM = 0;
  }

  if(alarmH == 13) {
    alarmH = 1;
  }
}

void receiveEvent(int howMany) {
  while(0 < Wire.available()) {
      methodSignal = Wire.read();
      if(methodSignal == HOUR_UP) {
        h++;
        checkTimeOfDay();
      } else if (methodSignal == MINUTE_UP) {
        m++;
      } else if (methodSignal == ALARM_HOUR_UP) {
        alarmH++;
        checkAlarmTimeOfDay();
      } else if (methodSignal == ALARM_MINUTE_UP) {
        alarmM++;
      } else if (methodSignal == ALARM_ON) {
        if (alarmOn) {
          alarmOn = false;
        } else {
          alarmOn = true;
          motorsOn();
        }
      } else if (methodSignal == ALARM_OFF) {
        alarmOff();
      } else if (methodSignal == MOTORS_OFF) {
        motorsOff();
      }
  }

  checkTime();
  checkAlarmTime();
}

void timeTeller() {
    Serial.print("Hours: ");
    Serial.print(h);
    Serial.print(" Minutes: ");
    Serial.print(m);
    Serial.print(" Seconds: ");
    Serial.println(s);
    displayTime("");

    // NOTE: Maybe change to ms to get better functionality, remember what Merek was saying about checking for button pushes 
    delay(950); // Adjustment so time increments in correct portions
    s++;
    //ms += 10;

    if(ms == 170) {
      s++;
      ms = 0;
    }
  
    // checks to update the time
    if(s == 60) {
      s = 0;
      m++;
      if(m==60) {
        h++;
        checkTimeOfDay();
        m = 0;
      }
      
    }
  
}

// LCD FUNCTIONS

/* 16 spaces */
void clearLCD() {
  LCD.write("                ");
  LCD.write("                ");
}

void toFirstLine() {
  LCD.write(254); 
  LCD.write(128);
}

void toSecondLine() {
  LCD.write(254);
  LCD.write(192);
}

void resetLCD() {
  clearLCD();
  toFirstLine();
}

void setTime(int hours, int mins) {
  h = hours;
  m = mins;
}

void timeSetterMode() {
  s = 0;
  
  boolean switchMethod = false;
  Serial.println("WOOHOO!");

  // Changing the hour
  while(!switchMethod) {
    
    receiveEvent(1);
    displayTime("timeSetterMode");

    if(methodSignal == HOUR_TO_MIN) {
      resetLCD();
      switchMethod = true;
    }
  }

  switchMethod = false;

  while(!switchMethod) {
    receiveEvent(1);

    displayTime("timeSetterMode");

    if(methodSignal == EXIT_TIME_SETTER){
      resetLCD();
      switchMethod = true;
    }
  }

}

void alarmSetterMode() {;
  int startTime = millis();
  Serial.println(startTime);
  
  boolean switchMethod = false;
  Serial.println("WOOHOO!");

  // Changing the hour
  while(!switchMethod) {
    
    receiveEvent(1);
    
    displayAlarm("alarmSetterMode");

    if(methodSignal == ALARM_HOUR_TO_MIN) {
      resetLCD();
      switchMethod = true;
    }
  }

  switchMethod = false;

  while(!switchMethod) {
    receiveEvent(1);

    displayAlarm("alarmSetterMode");

    if(methodSignal == EXIT_ALARM_SETTER){
      resetLCD();
      switchMethod = true;
    }
  }

  int endTime = millis();
  Serial.println(endTime);  

  s = s + (endTime - startTime) / 1000;
  if(s >= 60) {
    s -= 60;
    m++; 
  }
}

void displayTime(String method) {
  char hourString[10], minString[10], secString[10], todString[10];

  sprintf(hourString,"%2d",h); // create strings from the numbers
  sprintf(minString,"%2d",m);
  sprintf(secString,"%2d",s);
  sprintf(todString,"%2d",timeOfDay);

  resetLCD();
  LCD.write(hourString);
  LCD.write(":");
  LCD.write(minString);
  LCD.write(":");
  LCD.write(secString);
  if(timeOfDay == "am") {
    LCD.write(" am");
  } else {
    LCD.write(" pm");
  }

  if(method == "timeSetterMode") {
    toSecondLine();
    if(methodSignal == 1 || methodSignal == 2) {
      LCD.write("Editing Hours...");
    } else if (methodSignal == 3 || methodSignal == 4) {
      LCD.write("Editing Minutes...");
    }
  }

  if(alarmOn && method != "timeSetterMode") {
    toSecondLine();
    if(alarmPlaying) {
      LCD.write("ALARM PLAYING");
    } else {
      LCD.write("           ");
      if(alarmOn) {
        LCD.write("*");
      } else {
        LCD.write(" ");
      }

      displayAlarm("displayTime");
    }
  
    
  }
}

void displayAlarm(String method) {
  char hourString[10], minString[10], secString[10];

  sprintf(hourString,"%2d",alarmH); // create strings from the numbers
  sprintf(minString,"%2d",alarmM);

  if(method != "displayTime") {
    resetLCD();
  }
  LCD.write(hourString);
  LCD.write(":");
  LCD.write(minString);
  if(alarmTimeOfDay == "am") {
    LCD.write(" am");
  } else {
    LCD.write(" pm");
  }
  LCD.write("    ");

  if(method == "alarmSetterMode") {
    toSecondLine();
    if(methodSignal == 6 || methodSignal == 7) {
      LCD.write("Editing Hours...");
    } else if (methodSignal == 8 || methodSignal == 9) {
      LCD.write("Editing Minutes...");
    }
  }
}

void checkTimeOfDay() {
  if(h == 12) {
    if (timeOfDay == "am") {
      timeOfDay = "pm";
    } else {
      timeOfDay = "am";
    }
  }
}

void checkAlarmTimeOfDay() {
  if(alarmH == 12) {
    if (alarmTimeOfDay == "am") {
      alarmTimeOfDay = "pm";
    } else {
      alarmTimeOfDay = "am";
    }
  }
}

void alarm() {
  if(alarmOn && alarmH == h && alarmM == m && s == 0){
    resetLCD();
    alarmPlaying = true;
    motorsOn();    
  } 

  if(alarmPlaying) {
    
    if(s % 2 == 0) {
      tone(SPEAKER_1, 2000, 1000);
      tone(SPEAKER_2, 2000, 1000);
    } 
  }
}

void alarmOff() {
  alarmPlaying = false;
  motorsOff();
}

void motorsOn() {
  digitalWrite(MA1,HIGH);
  digitalWrite(MA2,LOW);
  analogWrite(PWMA,255);
}

void motorsOff() {
  digitalWrite(MA1,LOW);
  analogWrite(PWMA,0);  
}

void setup() {
  Wire.begin(2);                // join i2c bus with address #8
  Wire.onReceive(receiveEvent); // register event
  Serial.begin(9600);           // start serial for output

  pinMode(MA1,OUTPUT);
  pinMode(MA2,OUTPUT);
  pinMode(PWMA,OUTPUT);

  LCD.begin(9600); // set up serial port for 9600 baud
  delay(500); // wait for display to boot 

  setTime(12, 0);
}

void loop() {
  receiveEvent(1);
  Serial.println(methodSignal);
  if(methodSignal == TIME_SETTER) {
    timeSetterMode();
  } else if (methodSignal == ALARM_SETTER) {
    alarmSetterMode();
  }
  timeTeller();
  alarm();
}
